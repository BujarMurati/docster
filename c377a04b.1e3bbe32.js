(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{63:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(2),o=a(6),r=(a(0),a(75)),i={id:"home",title:"Docster",sidebar_label:"Getting started",slug:"/"},c={unversionedId:"home",id:"home",isDocsHomePage:!1,title:"Docster",description:"Docster is a static analysis tool that extracts Python docstrings from your code and inserts them into any Jinja2 template of your liking. Use this tool to automatically build documentation for your project.",source:"@site/docs/index.md",slug:"/",permalink:"/docster/",version:"current",sidebar_label:"Getting started",sidebar:"docs",next:{title:"Templating",permalink:"/docster/templating"}},s=[{value:"Why Docster?",id:"why-docster",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Working with local packages",id:"working-with-local-packages",children:[]},{value:"Working with remote packages",id:"working-with-remote-packages",children:[]}]}],l={rightToc:s};function d(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Docster is a static analysis tool that extracts Python docstrings from your code and inserts them into any ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://jinja.palletsprojects.com/en/2.11.x/"}),"Jinja2")," template of your liking. Use this tool to automatically build documentation for your project."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Warning")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This is an early release! Be prepared for a bunch of bugs, missing features and breaking changes."))),Object(r.b)("h2",{id:"why-docster"},"Why Docster?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Static"),": Docster never imports your code, nor do any of your code's dependencies need to be installed")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Pluggable"),": Docster just renders templates. Build content for whatever site generator you prefer.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Markup-agnostic"),": Build documentation in your preferred markup langague. Docster doesn't care if you use RST, Markdown, HTML or anything else."))),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"Docster requires Python >= 3.8"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"pip install docster\n")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ docster --help\nUsage: docster [OPTIONS] COMMAND [ARGS]...\n\n  Extract docstrings from a python package and render them in a custom\n  template. Docstring extraction is performed statically, meaning that your\n  code is not being imported or run, so there is no need to worry about side\n  effects.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  local   Extract docstrings from a local package and render a template...\n  remote  Fetch a remote git repo, extract docstrings and render a template...\n")),Object(r.b)("h3",{id:"working-with-local-packages"},"Working with local packages"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'$ docster local --help\nUsage: docster local [OPTIONS] [DIRECTORY]\n\n  Extract docstrings from a local package and render a template\n\nArguments:\n  [DIRECTORY]  path to the package  [default: .]\n\nOptions:\n  -t, --template-file PATH        path to a Jinja2 template  [default: template.md]\n\n  -o, --output PATH               where to write the output to  [default:\n                                  build]\n\n  -m, --mode [file|directory|stdout]\n                                  Output mode, one of "file" | "directory" |\n                                  "stdout". For "file" and "stdout" the\n                                  template receives a Package object and is\n                                  written to "output" or echoed\n                                  standardoutput. For "directory", the\n                                  template receives one Module object per\n                                  module and is written to one file per\n                                  module, with the output directory structure\n                                  mimicking the package structure. Defaults to\n                                  "stdout"   [default: stdout]\n\n  --help                          Show this message and exit.\n')),Object(r.b)("h3",{id:"working-with-remote-packages"},"Working with remote packages"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'$ docster remote --help\nUsage: docster remote [OPTIONS] URI\n\n  Fetch a remote git repo, extract docstrings and render a template\n\nArguments:\n  URI  a git uri from which to fetch a remote git repo  [required]\n\nOptions:\n  -t, --template-file PATH        path to a Jinja2 template  [default:\n                                  template.md]\n\n  -o, --output PATH               where to write the output to  [default:\n                                  build]\n\n  -p, --package-root PATH         the relative path to the package root inside\n                                  the repo  [default: src]\n\n  -m, --mode [file|directory|stdout]\n                                  Output mode, one of "file" | "directory" |\n                                  "stdout". For "file" and "stdout" the\n                                  template receives a Package object and is\n                                  written to "output" or echoed\n                                  standardoutput. For "directory", the\n                                  template receives one Module object per\n                                  module and is written to one file per\n                                  module, with the output directory structure\n                                  mimicking the package structure. Defaults to\n                                  "stdout"   [default: stdout]\n\n  --help                          Show this message and exit.\n')))}d.isMDXComponent=!0}}]);